/*
 * Copyright (c) 2020 gemfield <gemfield@civilnet.cn>
 * This file is part of libgemfield.so (https://github.com/civilnet/gemfield).
 */

#ifndef SYSZUX_PALETTE_H_
#define SYSZUX_PALETTE_H_

#include <cmath>
#include <array>
#include <memory>
#include <vector>
#include <algorithm>
#include <assert.h>
#if defined(SYSZUX_PALETTE_WITH_OPENCV)
#include <opencv2/core.hpp>
#include<opencv2/imgcodecs.hpp>
#endif

using namespace std;
double global_min = 0;
double global_max = 0;
namespace syszuxpalette
{
    enum class ImageMode
    {
        RGB,BGR
    };
    struct PixelRGB
    {
        constexpr PixelRGB(short r, short g, short b) : data({{ r, g, b }}) {}
        std::array<short, 3> data;
        short& r() { return data[0]; }
        short& g() { return data[1]; }
        short& b() { return data[2]; }
        short& operator[](size_t n) { return data[n]; }
    };

    inline PixelRGB getRoundViridisPixelRGB(double x)
    {
         x = std::max(0.0, std::min(1.0, x));
         constexpr PixelRGB data_round[] =
        {
            {68,1,84},
            {68,2,86},
            {69,4,87},
            {69,5,89},
            {70,7,90},
            {70,8,92},
            {70,10,93},
            {70,11,94},
            {71,13,96},
            {71,14,97},
            {71,16,99},
            {71,17,100},
            {71,19,101},
            {72,20,103},
            {72,22,104},
            {72,23,105},
            {72,24,106},
            {72,26,108},
            {72,27,109},
            {72,28,110},
            {72,29,111},
            {72,31,112},
            {72,32,113},
            {72,33,115},
            {72,35,116},
            {72,36,117},
            {72,37,118},
            {72,38,119},
            {72,40,120},
            {72,41,121},
            {71,42,122},
            {71,44,122},
            {71,45,123},
            {71,46,124},
            {71,47,125},
            {70,48,126},
            {70,50,126},
            {70,51,127},
            {70,52,128},
            {69,53,129},
            {69,55,129},
            {69,56,130},
            {68,57,131},
            {68,58,131},
            {68,59,132},
            {67,61,132},
            {67,62,133},
            {66,63,133},
            {66,64,134},
            {66,65,134},
            {65,66,135},
            {65,68,135},
            {64,69,136},
            {64,70,136},
            {63,71,136},
            {63,72,137},
            {62,73,137},
            {62,74,137},
            {62,76,138},
            {61,77,138},
            {61,78,138},
            {60,79,138},
            {60,80,139},
            {59,81,139},
            {59,82,139},
            {58,83,139},
            {58,84,140},
            {57,85,140},
            {57,86,140},
            {56,88,140},
            {56,89,140},
            {55,90,140},
            {55,91,141},
            {54,92,141},
            {54,93,141},
            {53,94,141},
            {53,95,141},
            {52,96,141},
            {52,97,141},
            {51,98,141},
            {51,99,141},
            {50,100,142},
            {50,101,142},
            {49,102,142},
            {49,103,142},
            {49,104,142},
            {48,105,142},
            {48,106,142},
            {47,107,142},
            {47,108,142},
            {46,109,142},
            {46,110,142},
            {46,111,142},
            {45,112,142},
            {45,113,142},
            {44,113,142},
            {44,114,142},
            {44,115,142},
            {43,116,142},
            {43,117,142},
            {42,118,142},
            {42,119,142},
            {42,120,142},
            {41,121,142},
            {41,122,142},
            {41,123,142},
            {40,124,142},
            {40,125,142},
            {39,126,142},
            {39,127,142},
            {39,128,142},
            {38,129,142},
            {38,130,142},
            {38,130,142},
            {37,131,142},
            {37,132,142},
            {37,133,142},
            {36,134,142},
            {36,135,142},
            {35,136,142},
            {35,137,142},
            {35,138,141},
            {34,139,141},
            {34,140,141},
            {34,141,141},
            {33,142,141},
            {33,143,141},
            {33,144,141},
            {33,145,140},
            {32,146,140},
            {32,146,140},
            {32,147,140},
            {31,148,140},
            {31,149,139},
            {31,150,139},
            {31,151,139},
            {31,152,139},
            {31,153,138},
            {31,154,138},
            {30,155,138},
            {30,156,137},
            {30,157,137},
            {31,158,137},
            {31,159,136},
            {31,160,136},
            {31,161,136},
            {31,161,135},
            {31,162,135},
            {32,163,134},
            {32,164,134},
            {33,165,133},
            {33,166,133},
            {34,167,133},
            {34,168,132},
            {35,169,131},
            {36,170,131},
            {37,171,130},
            {37,172,130},
            {38,173,129},
            {39,173,129},
            {40,174,128},
            {41,175,127},
            {42,176,127},
            {44,177,126},
            {45,178,125},
            {46,179,124},
            {47,180,124},
            {49,181,123},
            {50,182,122},
            {52,182,121},
            {53,183,121},
            {55,184,120},
            {56,185,119},
            {58,186,118},
            {59,187,117},
            {61,188,116},
            {63,188,115},
            {64,189,114},
            {66,190,113},
            {68,191,112},
            {70,192,111},
            {72,193,110},
            {74,193,109},
            {76,194,108},
            {78,195,107},
            {80,196,106},
            {82,197,105},
            {84,197,104},
            {86,198,103},
            {88,199,101},
            {90,200,100},
            {92,200,99},
            {94,201,98},
            {96,202,96},
            {99,203,95},
            {101,203,94},
            {103,204,92},
            {105,205,91},
            {108,205,90},
            {110,206,88},
            {112,207,87},
            {115,208,86},
            {117,208,84},
            {119,209,83},
            {122,209,81},
            {124,210,80},
            {127,211,78},
            {129,211,77},
            {132,212,75},
            {134,213,73},
            {137,213,72},
            {139,214,70},
            {142,214,69},
            {144,215,67},
            {147,215,65},
            {149,216,64},
            {152,216,62},
            {155,217,60},
            {157,217,59},
            {160,218,57},
            {162,218,55},
            {165,219,54},
            {168,219,52},
            {170,220,50},
            {173,220,48},
            {176,221,47},
            {178,221,45},
            {181,222,43},
            {184,222,41},
            {186,222,40},
            {189,223,38},
            {192,223,37},
            {194,223,35},
            {197,224,33},
            {200,224,32},
            {202,225,31},
            {205,225,29},
            {208,225,28},
            {210,226,27},
            {213,226,26},
            {216,226,25},
            {218,227,25},
            {221,227,24},
            {223,227,24},
            {226,228,24},
            {229,228,25},
            {231,228,25},
            {234,229,26},
            {236,229,27},
            {239,229,28},
            {241,229,29},
            {244,230,30},
            {246,230,32},
            {248,230,33},
            {251,231,35},
            {253,231,37}
        };
        return data_round[static_cast<size_t>(std::round(x * 255.0))];
    }
    inline PixelRGB getFloorViridisPixelRGB(double x)
    {
        x = std::max(0.0, std::min(1.0, x));
        constexpr PixelRGB data_floor[] =
        {
            {68,1,84},
            {68,2,85},
            {68,3,87},
            {69,5,88},
            {69,6,90},
            {69,8,91},
            {70,9,92},
            {70,11,94},
            {70,12,95},
            {70,14,97},
            {71,15,98},
            {71,17,99},
            {71,18,101},
            {71,20,102},
            {71,21,103},
            {71,22,105},
            {71,24,106},
            {72,25,107},
            {72,26,108},
            {72,28,110},
            {72,29,111},
            {72,30,112},
            {72,32,113},
            {72,33,114},
            {72,34,115},
            {72,35,116},
            {71,37,117},
            {71,38,118},
            {71,39,119},
            {71,40,120},
            {71,42,121},
            {71,43,122},
            {71,44,123},
            {70,45,124},
            {70,47,124},
            {70,48,125},
            {70,49,126},
            {69,50,127},
            {69,52,127},
            {69,53,128},
            {69,54,129},
            {68,55,129},
            {68,57,130},
            {67,58,131},
            {67,59,131},
            {67,60,132},
            {66,61,132},
            {66,62,133},
            {66,64,133},
            {65,65,134},
            {65,66,134},
            {64,67,135},
            {64,68,135},
            {63,69,135},
            {63,71,136},
            {62,72,136},
            {62,73,137},
            {61,74,137},
            {61,75,137},
            {61,76,137},
            {60,77,138},
            {60,78,138},
            {59,80,138},
            {59,81,138},
            {58,82,139},
            {58,83,139},
            {57,84,139},
            {57,85,139},
            {56,86,139},
            {56,87,140},
            {55,88,140},
            {55,89,140},
            {54,90,140},
            {54,91,140},
            {53,92,140},
            {53,93,140},
            {52,94,141},
            {52,95,141},
            {51,96,141},
            {51,97,141},
            {50,98,141},
            {50,99,141},
            {49,100,141},
            {49,101,141},
            {49,102,141},
            {48,103,141},
            {48,104,141},
            {47,105,141},
            {47,106,141},
            {46,107,142},
            {46,108,142},
            {46,109,142},
            {45,110,142},
            {45,111,142},
            {44,112,142},
            {44,113,142},
            {44,114,142},
            {43,115,142},
            {43,116,142},
            {42,117,142},
            {42,118,142},
            {42,119,142},
            {41,120,142},
            {41,121,142},
            {40,122,142},
            {40,122,142},
            {40,123,142},
            {39,124,142},
            {39,125,142},
            {39,126,142},
            {38,127,142},
            {38,128,142},
            {38,129,142},
            {37,130,142},
            {37,131,141},
            {36,132,141},
            {36,133,141},
            {36,134,141},
            {35,135,141},
            {35,136,141},
            {35,137,141},
            {34,137,141},
            {34,138,141},
            {34,139,141},
            {33,140,141},
            {33,141,140},
            {33,142,140},
            {32,143,140},
            {32,144,140},
            {32,145,140},
            {31,146,140},
            {31,147,139},
            {31,148,139},
            {31,149,139},
            {31,150,139},
            {30,151,138},
            {30,152,138},
            {30,153,138},
            {30,153,138},
            {30,154,137},
            {30,155,137},
            {30,156,137},
            {30,157,136},
            {30,158,136},
            {30,159,136},
            {30,160,135},
            {31,161,135},
            {31,162,134},
            {31,163,134},
            {32,164,133},
            {32,165,133},
            {33,166,133},
            {33,167,132},
            {34,167,132},
            {35,168,131},
            {35,169,130},
            {36,170,130},
            {37,171,129},
            {38,172,129},
            {39,173,128},
            {40,174,127},
            {41,175,127},
            {42,176,126},
            {43,177,125},
            {44,177,125},
            {46,178,124},
            {47,179,123},
            {48,180,122},
            {50,181,122},
            {51,182,121},
            {53,183,120},
            {54,184,119},
            {56,185,118},
            {57,185,118},
            {59,186,117},
            {61,187,116},
            {62,188,115},
            {64,189,114},
            {66,190,113},
            {68,190,112},
            {69,191,111},
            {71,192,110},
            {73,193,109},
            {75,194,108},
            {77,194,107},
            {79,195,105},
            {81,196,104},
            {83,197,103},
            {85,198,102},
            {87,198,101},
            {89,199,100},
            {91,200,98},
            {94,201,97},
            {96,201,96},
            {98,202,95},
            {100,203,93},
            {103,204,92},
            {105,204,91},
            {107,205,89},
            {109,206,88},
            {112,206,86},
            {114,207,85},
            {116,208,84},
            {119,208,82},
            {121,209,81},
            {124,210,79},
            {126,210,78},
            {129,211,76},
            {131,211,75},
            {134,212,73},
            {136,213,71},
            {139,213,70},
            {141,214,68},
            {144,214,67},
            {146,215,65},
            {149,215,63},
            {151,216,62},
            {154,216,60},
            {157,217,58},
            {159,217,56},
            {162,218,55},
            {165,218,53},
            {167,219,51},
            {170,219,50},
            {173,220,48},
            {175,220,46},
            {178,221,44},
            {181,221,43},
            {183,221,41},
            {186,222,39},
            {189,222,38},
            {191,223,36},
            {194,223,34},
            {197,223,33},
            {199,224,31},
            {202,224,30},
            {205,224,29},
            {207,225,28},
            {210,225,27},
            {212,225,26},
            {215,226,25},
            {218,226,24},
            {220,226,24},
            {223,227,24},
            {225,227,24},
            {228,227,24},
            {231,228,25},
            {233,228,25},
            {236,228,26},
            {238,229,27},
            {241,229,28},
            {243,229,30},
            {246,230,31},
            {248,230,33},
            {250,230,34},
            {253,231,36}
        };
        return data_floor[static_cast<size_t>(std::round(x * 255.0))];
    }

    unique_ptr<unsigned char[]> createRGBArrayFromMatrix(vector<vector<float>> matrix, ImageMode mode = ImageMode::RGB,bool is_mirror_y=true, bool is_round=false)
    {
        //w = 391 if 4s
        int w = matrix.size();
        //h = mel brands number
        int h = matrix[0].size();
        if(w == 0 or h == 0){
            return unique_ptr<unsigned char[]>{nullptr};
        }
        std::cout<<w << " x "<<h<<std::endl;
        unique_ptr<unsigned char []> rc(new unsigned char[w*h*3]);
        //1st normalized, to 0~1
        //clip level or audio file level or universal level?
        double min=0,max = 0;
        for(auto& v : matrix){
            for(auto x : v){
                if(x < min){
                    min = x;
                }else if(x > max){
                    max =x;
                }
            }
        }

        double d = max - min;
	if(min<global_min){
	  global_min = min;
	}
	if(max>global_max){
	  global_max = max;
	}
        std::cout<<"gemfield debug min max: "<<min<<" | "<<max<<" | "<<d<<" | "<<global_min<<" | "<<global_max<<std::endl;
        if(d == 0){
            return unique_ptr<unsigned char[]>{nullptr};
        }

        for(auto& v: matrix){
            std::for_each(v.begin(), v.end(), [min,d](float& x){ x = (x-min)/d;} );
        }
        //2nd, transpose to rgb array
        int w_idx = 0;
        for(auto& v: matrix){
            int h_idx = 0;
            for(auto x: v){
		PixelRGB rgb = {0,0,0};
		if(is_round){
		  rgb = getRoundViridisPixelRGB(x);
		}else{
                  rgb = getFloorViridisPixelRGB(x);
                }
                int real_h_idx = h_idx;
                if(is_mirror_y){
                    real_h_idx = h - h_idx - 1;
                }

                if(mode == ImageMode::RGB){
                    for(int c_idx =0; c_idx<3;c_idx++){
                        rc[ (w * real_h_idx + w_idx) * 3 + c_idx]  = rgb[c_idx];
                    }
                }else if(mode == ImageMode::BGR){
                    rc[ (w * real_h_idx + w_idx) * 3 + 0]  = rgb.b();
                    rc[ (w * real_h_idx + w_idx) * 3 + 1]  = rgb.g();
                    rc[ (w * real_h_idx + w_idx) * 3 + 2]  = rgb.r();
                }else{
                    return unique_ptr<unsigned char[]>{nullptr};
                }
                ++h_idx;
            }
            ++w_idx;
        }
        return rc;
    }


void syszuxImgWrite(const string& output_path, unique_ptr<unsigned char[]>& data, int h, int w){
#if defined(SYSZUX_PALETTE_WITH_OPENCV)
    cv::Mat src = cv::Mat(h,w,CV_8UC3,data.get());
    cv::imwrite(output_path, src);
    std::cout<<"SYSZUX Palette image saved to: "<<output_path<<std::endl;
#else
    std::cout<<"Error: You should add -DSYSZUX_PALETTE_WITH_OPENCV to your build command line!"<<std::endl;
#endif
}

void syszuxMultiImgWrite(const string& output_path, vector<unique_ptr<unsigned char[]>>& data, int h, int w){
#if defined(SYSZUX_PALETTE_WITH_OPENCV)
    int suffix = 0;
    for(auto& r : data){
        cv::Mat src = cv::Mat(h,w,CV_8UC3,r.get());
        std::string real_output_path = output_path+"_"+std::to_string(++suffix)+".jpg";
        cv::imwrite(real_output_path, src);
        std::cout<<"SYSZUX Palette image saved to: "<<real_output_path<<std::endl;
    }
#else
    std::cout<<"Error: You should add -DSYSZUX_PALETTE_WITH_OPENCV to your build command line!"<<std::endl;
#endif
}

}
#endif
